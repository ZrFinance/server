import randomimport timefrom django.utils import timezonefrom rest_framework import viewsetsfrom rest_framework.decorators import list_routefrom core.decorator.response import Core_connectorfrom utils.exceptions import PubErrorCustomfrom apps.public.models import Verification,Banner,Notice,SysParam,Luckyfrom apps.order.models import Order,Tranlistfrom apps.user.models import Agent,Usersfrom apps.order.serializers import TranlistSerializerfrom apps.public.serializers import VerificationSerializer,LuckySerializerfrom apps.user.serializers import AgentSerializer,UsersSerializerfrom apps.public.utils import myrandomfrom auth.authentication import Authenticationclass PublicAPIView(viewsets.ViewSet):    def get_authenticators(self):        if self.action_map.get('post') not in ['get_verification_code']:            return [auth() for auth in [Authentication]]    @list_route(methods=['GET'])    @Core_connector()    def getbanner(self, request, *args, **kwargs):        banner=Banner.objects.filter()        if banner.exists():            data = []            for item in banner:                data.append({                    'id': item.id,                    'url':item.url,                })            data = {'imgs':data}        else:            data={'imgs':None}        return {"data": data}    @list_route(methods=['POST'])    @Core_connector(transaction=True,serializer_class=VerificationSerializer,model_class=Verification)    def get_verification_code(self,requet,*args,**kwargs):        serializer = kwargs.pop('serializer')        isinstance=serializer.save()        data={            "verification_code" : isinstance.code,        }        return {"data":data}    @list_route(methods=['GET'])    @Core_connector()    def getnotice(self, request, *args, **kwargs):        notice=Notice.objects.filter().order_by('-createtime')        if notice.exists():            notice = notice[0]            data={                'title': notice.title,                'content': notice.content,                'createtime': notice.createtime            }        else:            data=None        return {"data": data}    def luckyrandom(self,param):        a = [0, 1, 5, 3, 7]        b = [param.bfbwzj/100, param.bfb1000/ 100, param.bfb2000/ 100, param.bfb5000 / 100, param.bfb10000/ 100]        index = myrandom(a, b)        return index    @list_route(methods=['GET'])    @Core_connector()    def getluckyindex(self, request, *args, **kwargs):        user = request.user        try:            param=SysParam.objects.get()            index=self.luckyrandom(param)        except SysParam.DoesNotExist:            index=0        user.lastindex = index        user.save()        return {"data": {'index': index}}    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def clicklucky(self, request, *args, **kwargs):        user = request.user        if user.lastindex==1:            name='幸运认筹1000'            amount=1000        elif user.lastindex==3:            name='幸运认筹5000'            amount=5000        elif user.lastindex == 5:            name = '幸运认筹2000'            amount=2000        elif user.lastindex == 7:            name = '幸运认筹10000'            amount=10000        else:            name = '未知'        Lucky.objects.create(userid=user.userid,index=user.lastindex,name=name)        Order.objects.create(            trantype=0,            amount=amount,            userid=user.userid,            username=user.username,            status=0,            updtime=time.mktime(timezone.now().timetuple())        )        try:            param=SysParam.objects.get()            index=self.luckyrandom(param)        except SysParam.DoesNotExist:            index=0        user.lastindex = index        user.save()        return {"data": {'index': index}}    @list_route(methods=['GET'])    @Core_connector(pagination=True)    def querylucky(self, request, *args, **kwargs):        user = request.user        return {'data':LuckySerializer(Lucky.objects.filter(userid=user.userid).order_by('-createtime'),many=True).data}    @list_route(methods=['GET'])    @Core_connector(pagination=True)    def teamquery(self, request, *args, **kwargs):        user = request.user        agent1=Users.objects.raw(            """                SELECT t2.userid,t1.id,t2.mobile,t2.createtime,t2.status                FROM user as t2                INNER JOIN agent as `t1` ON t1.mobile1 = t2.mobile                WHERE t1.mobile=%s and t1.level ='1'            """,[user.mobile]        )        agent1=list(agent1)        agent2=Users.objects.raw(            """                SELECT t2.userid,t1.id,t2.mobile,t2.createtime,t2.status                FROM user as `t2`                INNER JOIN `agent` as `t1` ON t1.mobile1 = t2.mobile                WHERE t1.mobile=%s and t1.level ='2'            """,[user.mobile]        )        agent2=list(agent2)        return {'data':{            'level1count': len(agent1),            'level2count': len(agent2),            'level1': AgentSerializer(agent1,many=True).data,            'level2': AgentSerializer(agent2,many=True).data,        }}    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def activation(self, request, *args, **kwargs):        mobile=self.request.data.get('mobile')        try:            user=Users.objects.get(mobile=mobile)        except Users.DoesNotExist:            raise PubErrorCustom("该用户不存在!")        if user.status!=1:            raise PubErrorCustom("状态异常！")        user.status=0        user.save()        return None    @list_route(methods=['GET'])    @Core_connector()    def userquery(self, request, *args, **kwargs):        user = request.user        return {'data':UsersSerializer(user,many=False).data}    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def userupd(self, request, *args, **kwargs):        if request.user.pay_passwd != request.data.get('pay_passwd') :            raise PubErrorCustom("二级密码错误！")        if len(request.user.idcard) > 0:            raise PubErrorCustom("已修改一次，不能再修改！")        serializer = UsersSerializer(request.user, data=request.data)        serializer.is_valid(raise_exception=True)        serializer.save()        return None    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def pay_passwdupd(self, request, *args, **kwargs):        if request.user.pay_passwd != request.data.get('pay_passwd') :            raise PubErrorCustom("二级密码错误！")        request.user.pay_passwd = request.data.get('new_pay_passwd')        request.user.save()        return None    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def passwdupd(self, request, *args, **kwargs):        if request.user.passwd != request.data.get('passwd'):            raise PubErrorCustom("登录密码错误！")        request.user.passwd = request.data.get('new_passwd')        request.user.save()        return None    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def buypowerupd(self, request, *args, **kwargs):        username=request.data.get('username')        amount=request.data.get('amount')        pay_passwd=request.data.get('pay_passwd')        user=request.user        if user.buypower < int(amount):            raise PubErrorCustom('余额不足！')        if user.pay_passwd != pay_passwd:            raise PubErrorCustom('二级密码错误！')        try:            user_to = Users.objects.get(username=username)        except Users.DoesNotExist:            raise PubErrorCustom('对方账户不存在！')        if user_to.mobile not in user.agent:            raise PubErrorCustom('权限不足,无法转账！')        user.buypower -= int(amount)        user_to.buypower += int(amount)        user.save()        user_to.save()        Tranlist.objects.create(            trantype=1,            userid=user.userid,            username=user.username,            userid_to=user_to.userid,            username_to=user_to.username,            bal=user.buypower+int(amount),            amount=int(amount)*-1        )        Tranlist.objects.create(            trantype=2,            userid=user_to.userid,            username=user_to.username,            userid_to=user.userid,            username_to=user.username,            bal=user_to.buypower-int(amount),            amount=int(amount)        )        return None    @list_route(methods=['POST'])    @Core_connector(transaction=True)    def activationupd(self, request, *args, **kwargs):        username=request.data.get('username')        amount=request.data.get('amount')        pay_passwd=request.data.get('pay_passwd')        user=request.user        if user.activation < int(amount):            raise PubErrorCustom('余额不足！')        if user.pay_passwd != pay_passwd:            raise PubErrorCustom('二级密码错误！')        try:            user_to = Users.objects.get(username=username)        except Users.DoesNotExist:            raise PubErrorCustom('对方账户不存在！')        if user_to.mobile not in user.agent:            raise PubErrorCustom('权限不足,无法转账！')        user.activation -= int(amount)        user_to.activation += int(amount)        user.save()        user_to.save()        Tranlist.objects.create(            trantype=4,            userid=user.userid,            username=user.username,            userid_to=user_to.userid,            username_to=user_to.username,            bal=user.activation+int(amount),            amount=int(amount)*-1        )        Tranlist.objects.create(            trantype=5,            userid=user_to.userid,            username=user_to.username,            userid_to=user.userid,            username_to=user.username,            bal=user_to.activation-int(amount),            amount=int(amount)        )        return None    @list_route(methods=['GET'])    @Core_connector(pagination=True)    def tranlistbquery(self, request, *args, **kwargs):        user = request.user        flag = self.request.query_params.get('flag')        if str(flag)=='0':            return {'data':TranlistSerializer(Tranlist.objects.filter(userid=user.userid,trantype__in=[1,2,3]),many=True).data}        else:            return {'data': TranlistSerializer(Tranlist.objects.filter(userid=user.userid, trantype__in=[4,5]),many=True).data}